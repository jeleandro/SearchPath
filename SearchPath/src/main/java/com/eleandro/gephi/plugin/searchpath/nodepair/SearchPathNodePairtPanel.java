/*
 * Your license here
 *
 * If you don't need it, remove this file and edit MyMetricUI accordingly.
 */
package com.eleandro.gephi.plugin.searchpath.nodepair;

import com.eleandro.gephi.plugin.searchpath.SearchPathConfig;
import javax.swing.JSpinner;

/**
 *
 * See http://wiki.gephi.org/index.php/HowTo_write_a_metric#Create_StatisticsUI
 *
 * @author José Eleandro Custódio
 */
public class SearchPathNodePairtPanel extends javax.swing.JPanel {

    private String YES_NO[] = new String[]{"", ""};

    /**
     * Creates new form SearchPathNodePairtPanel
     */
    public SearchPathNodePairtPanel() {
        YES_NO[0] = org.openide.util.NbBundle.getMessage(SearchPathNodePairtPanel.class, "yes");
        YES_NO[1] = org.openide.util.NbBundle.getMessage(SearchPathNodePairtPanel.class, "no");
        initComponents();
        spMinimumDifference.setVisible(false);
        lbMinimumDifference.setVisible(false);
    }

    public int getPathNumber() {
        return ((Number) spNumberOfPathOnMetadata.getValue()).intValue();
    }

    public int getMergePath() {
        return getInt(spinnerMerge);
    }

    public int getNumberOfPathsOnReport() {
        return getInt(spNumberOfPathsOnReport);
    }

    private int getInt(JSpinner spinner) {
        return ((Number) spinner.getValue()).intValue();
    }

    private float getFloat(JSpinner spinner) {
        return ((Number) spinner.getValue()).floatValue();
    }

    public int getRelevance() {
        return getInt(spMinimumDifference);
    }

    public void setSearchPathConfig(SearchPathConfig config) {
        spMinimumDifference.setValue(config.getPercDiffMinimunPath());
        spNumberOfPathsOnReport.setValue(config.getNumberOfPathsOnReport());
        spinnerMerge.setValue(config.getNumberOfPathToBeMerged());
        spNumberOfPathOnMetadata.setValue(config.getNumberOfPathsOnMetaData());
    }

    public SearchPathConfig getSearchPathConfig() {
        boolean show = cbShowStartAndEnd.getSelectedIndex() == 0;

        return new SearchPathConfig()
                .setWeightField(cbWeight.getSelectedItem().toString())
                .setPercDiffMinimunPath(getFloat(spMinimumDifference) / 100)
                .setNumberOfPathsOnReport(getInt(spNumberOfPathsOnReport))
                .setNumberOfPathsOnMetaData(getInt(spNumberOfPathOnMetadata))
                .setAmountOfPathToBeMerged(getInt(spinnerMerge))
                .setShowStartAndEnd(show);
    }

    /**
     * -----------------------------------------------------------
     */
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        header = new org.jdesktop.swingx.JXHeader();
        panelGroupReportOptions = new javax.swing.JPanel();
        lbNumberOfPathsOnReport = new javax.swing.JLabel();
        spNumberOfPathsOnReport = new javax.swing.JSpinner();
        cbShowStartAndEnd = new javax.swing.JComboBox();
        lbShowStartAndEnd = new javax.swing.JLabel();
        panelGroupMetadataOptions = new javax.swing.JPanel();
        LbNumberOfPathOnMetadata = new javax.swing.JLabel();
        spNumberOfPathOnMetadata = new javax.swing.JSpinner();
        lbPathMerge = new javax.swing.JLabel();
        spinnerMerge = new javax.swing.JSpinner();
        panelMetodologyOptions = new javax.swing.JPanel();
        lbWeightField = new javax.swing.JLabel();
        lbMinimumDifference = new javax.swing.JLabel();
        cbWeight = new javax.swing.JComboBox();
        spMinimumDifference = new javax.swing.JSpinner();

        setMinimumSize(new java.awt.Dimension(500, 400));
        java.awt.GridBagLayout layout = new java.awt.GridBagLayout();
        layout.columnWidths = new int[] {1};
        layout.rowHeights = new int[] {1};
        setLayout(layout);

        header.setDescription(org.openide.util.NbBundle.getMessage(SearchPathNodePairtPanel.class, "SearchPathNodePairtPanel.header.description")); // NOI18N
        header.setTitle(org.openide.util.NbBundle.getMessage(SearchPathNodePairtPanel.class, "SearchPathNodePairtPanel.header.title")); // NOI18N
        header.setMinimumSize(null);
        header.setPreferredSize(null);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        add(header, gridBagConstraints);

        panelGroupReportOptions.setBorder(javax.swing.BorderFactory.createTitledBorder(org.openide.util.NbBundle.getMessage(SearchPathNodePairtPanel.class, "SearchPathNodePairtPanel.panelGroupReportOptions.border.title"))); // NOI18N
        panelGroupReportOptions.setLayout(new java.awt.GridBagLayout());

        lbNumberOfPathsOnReport.setText(org.openide.util.NbBundle.getMessage(SearchPathNodePairtPanel.class, "SearchPathNodePairtPanel.lbNumberOfPathsOnReport.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        panelGroupReportOptions.add(lbNumberOfPathsOnReport, gridBagConstraints);

        spNumberOfPathsOnReport.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(1), Integer.valueOf(1), null, Integer.valueOf(1)));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 69;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        panelGroupReportOptions.add(spNumberOfPathsOnReport, gridBagConstraints);

        cbShowStartAndEnd.setModel(new javax.swing.DefaultComboBoxModel(YES_NO));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        panelGroupReportOptions.add(cbShowStartAndEnd, gridBagConstraints);

        lbShowStartAndEnd.setText(org.openide.util.NbBundle.getMessage(SearchPathNodePairtPanel.class, "SearchPathNodePairtPanel.lbShowStartAndEnd.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        panelGroupReportOptions.add(lbShowStartAndEnd, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 5, 5);
        add(panelGroupReportOptions, gridBagConstraints);

        panelGroupMetadataOptions.setBorder(javax.swing.BorderFactory.createTitledBorder(null, org.openide.util.NbBundle.getMessage(SearchPathNodePairtPanel.class, "SearchPathNodePairtPanel.panelGroupMetadataOptions.border.title"), javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, null, java.awt.Color.black)); // NOI18N
        java.awt.GridBagLayout panelMetadataLayout = new java.awt.GridBagLayout();
        panelMetadataLayout.columnWidths = new int[] {1};
        panelMetadataLayout.rowHeights = new int[] {1};
        panelGroupMetadataOptions.setLayout(panelMetadataLayout);

        LbNumberOfPathOnMetadata.setText(org.openide.util.NbBundle.getMessage(SearchPathNodePairtPanel.class, "SearchPathNodePairtPanel.LbNumberOfPathOnMetadata.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = -51;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        panelGroupMetadataOptions.add(LbNumberOfPathOnMetadata, gridBagConstraints);

        spNumberOfPathOnMetadata.setModel(new javax.swing.SpinnerNumberModel(1, 0, 30, 1));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 69;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        panelGroupMetadataOptions.add(spNumberOfPathOnMetadata, gridBagConstraints);

        lbPathMerge.setText(org.openide.util.NbBundle.getMessage(SearchPathNodePairtPanel.class, "SearchPathNodePairtPanel.lbPathMerge.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = -51;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        panelGroupMetadataOptions.add(lbPathMerge, gridBagConstraints);

        spinnerMerge.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(1), Integer.valueOf(0), null, Integer.valueOf(1)));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 69;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        panelGroupMetadataOptions.add(spinnerMerge, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 5, 5);
        add(panelGroupMetadataOptions, gridBagConstraints);

        panelMetodologyOptions.setBorder(javax.swing.BorderFactory.createTitledBorder(org.openide.util.NbBundle.getMessage(SearchPathNodePairtPanel.class, "SearchPathNodePairtPanel.panelMetodologyOptions.border.title"))); // NOI18N
        panelMetodologyOptions.setLayout(new java.awt.GridBagLayout());

        lbWeightField.setText(org.openide.util.NbBundle.getMessage(SearchPathNodePairtPanel.class, "SearchPathNodePairtPanel.lbWeightField.text")); // NOI18N
        lbWeightField.setName(org.openide.util.NbBundle.getMessage(SearchPathNodePairtPanel.class, "SearchPathNodePairtPanel.lbWeightField.name")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        panelMetodologyOptions.add(lbWeightField, gridBagConstraints);

        lbMinimumDifference.setLabelFor(spMinimumDifference);
        lbMinimumDifference.setText(org.openide.util.NbBundle.getMessage(SearchPathNodePairtPanel.class, "SearchPathNodePairtPanel.lbMinimumDifference.text")); // NOI18N
        lbMinimumDifference.setMaximumSize(null);
        lbMinimumDifference.setMinimumSize(null);
        lbMinimumDifference.setName(org.openide.util.NbBundle.getMessage(SearchPathNodePairtPanel.class, "SearchPathNodePairtPanel.lbMinimumDifference.name")); // NOI18N
        lbMinimumDifference.setPreferredSize(null);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        panelMetodologyOptions.add(lbMinimumDifference, gridBagConstraints);

        cbWeight.setModel(new com.eleandro.gephi.plugin.searchpath.MetadadosModel(com.eleandro.gephi.plugin.searchpath.MetadadosModel.Type.EDGE));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 70;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        panelMetodologyOptions.add(cbWeight, gridBagConstraints);

        spMinimumDifference.setModel(new javax.swing.SpinnerNumberModel(Float.valueOf(0.0f), Float.valueOf(0.0f), Float.valueOf(100.0f), Float.valueOf(1.0f)));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 69;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        panelMetodologyOptions.add(spMinimumDifference, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 138;
        gridBagConstraints.ipady = 10;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 5, 5);
        add(panelMetodologyOptions, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel LbNumberOfPathOnMetadata;
    private javax.swing.JComboBox cbShowStartAndEnd;
    private javax.swing.JComboBox cbWeight;
    private org.jdesktop.swingx.JXHeader header;
    private javax.swing.JLabel lbMinimumDifference;
    private javax.swing.JLabel lbNumberOfPathsOnReport;
    private javax.swing.JLabel lbPathMerge;
    private javax.swing.JLabel lbShowStartAndEnd;
    private javax.swing.JLabel lbWeightField;
    private javax.swing.JPanel panelGroupMetadataOptions;
    private javax.swing.JPanel panelGroupReportOptions;
    private javax.swing.JPanel panelMetodologyOptions;
    private javax.swing.JSpinner spMinimumDifference;
    private javax.swing.JSpinner spNumberOfPathOnMetadata;
    private javax.swing.JSpinner spNumberOfPathsOnReport;
    private javax.swing.JSpinner spinnerMerge;
    // End of variables declaration//GEN-END:variables
}
