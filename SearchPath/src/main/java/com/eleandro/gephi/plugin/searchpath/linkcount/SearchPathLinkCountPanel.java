/*
 * Your license here
 *
 * If you don't need it, remove this file and edit MyMetricUI accordingly.
 */

package com.eleandro.gephi.plugin.searchpath.linkcount;

import com.eleandro.gephi.plugin.searchpath.DifferenceType;
import com.eleandro.gephi.plugin.searchpath.SearchPathConfig;
import javax.swing.JSpinner;

/**
 *
 * See http://wiki.gephi.org/index.php/HowTo_write_a_metric#Create_StatisticsUI
 * @author José Eleandro Custódio
 */
public class SearchPathLinkCountPanel extends javax.swing.JPanel {
    private String YES_NO[]=new String[]{"",""};

    /** Creates new form SearchPathLinkCountPanel */
    public SearchPathLinkCountPanel() {
        YES_NO[0]=org.openide.util.NbBundle.getMessage(SearchPathLinkCountPanel.class, "yes");
        YES_NO[1]=org.openide.util.NbBundle.getMessage(SearchPathLinkCountPanel.class, "no");
        initComponents();
        //spMinimumDifference.setVisible(false);
        //lbMinimumDifference.setVisible(false);
    }
    
    public int getPathNumber(){
        return ((Number)spNumberOfPathOnMetadata.getValue()).intValue();
    }
    
    public int getMergePath(){
        return getInt(spinnerMerge);
    }
    
    
    public int getNumberOfPathsOnReport(){
        return getInt(spNumberOfPathsOnReport);
    }
    
    private int getInt(JSpinner spinner){
        return ((Number)spinner.getValue()).intValue();
    }
    
    private float getFloat(JSpinner spinner){
        return ((Number)spinner.getValue()).floatValue();
    }
    
    public int getRelevance(){
        return getInt(spMinimumDifference);
    }
    
    public void setSearchPathConfig(SearchPathConfig config){
        int index = 0;
        if(config.getDifferenceType().compareTo(DifferenceType.ALL_VS_ALL)==0){
            index = 1;
        }
        spMinimumDifference.setValue(config.getPercDiffMinimunPath()*100);
        spNumberOfPathsOnReport.setValue(config.getNumberOfPathsOnReport());
        spinnerMerge.setValue(config.getNumberOfPathToBeMerged());
        spNumberOfPathOnMetadata.setValue(config.getNumberOfPathsOnMetaData());
        cbIgnoreRelevanceOnDiffFilter.setSelectedIndex(config.isIgnoreSPLConDiffFilter()?0:1);
        cbDifferenceMethod.setSelectedIndex(index);
    }
    
    public SearchPathConfig getSearchPathConfig(){
        boolean show = cbShowStartAndEnd.getSelectedIndex() == 0;
        DifferenceType type = DifferenceType.ALL_VS_ALL;
        if(cbDifferenceMethod.getSelectedIndex() ==0){
            type = DifferenceType.ONE_ALL_ONE;
        }
        
        return new SearchPathConfig()
                .setWeightField(cbWeight.getSelectedItem().toString())
                .setPercDiffMinimunPath(getFloat(spMinimumDifference)/100)
                .setNumberOfPathsOnReport(getInt(spNumberOfPathsOnReport))
                .setNumberOfPathsOnMetaData(getInt(spNumberOfPathOnMetadata))
                .setAmountOfPathToBeMerged(getInt(spinnerMerge))
                .setShowStartAndEnd(show)
                .setIgnoreSPLConDiffFilter(cbIgnoreRelevanceOnDiffFilter.getSelectedIndex()==0)
                .setDifferenceType(type);
    }
        

    /** ----------------------------------------------------------- */

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        org.jdesktop.swingx.JXHeader header = new org.jdesktop.swingx.JXHeader();
        javax.swing.JPanel panelGroupReportOptions = new javax.swing.JPanel();
        javax.swing.JLabel lbNumberOfPathsOnReport = new javax.swing.JLabel();
        spNumberOfPathsOnReport = new javax.swing.JSpinner();
        cbShowStartAndEnd = new javax.swing.JComboBox();
        javax.swing.JLabel lbShowStartAndEnd = new javax.swing.JLabel();
        javax.swing.JPanel panelGroupMetadataOptions = new javax.swing.JPanel();
        javax.swing.JLabel LbNumberOfPathOnMetadata = new javax.swing.JLabel();
        spNumberOfPathOnMetadata = new javax.swing.JSpinner();
        javax.swing.JLabel lbPathMerge = new javax.swing.JLabel();
        spinnerMerge = new javax.swing.JSpinner();
        javax.swing.JPanel panelMetodologyOptions = new javax.swing.JPanel();
        javax.swing.JLabel lbWeightField = new javax.swing.JLabel();
        javax.swing.JLabel lbMinimumDifference = new javax.swing.JLabel();
        cbWeight = new javax.swing.JComboBox();
        spMinimumDifference = new javax.swing.JSpinner();
        javax.swing.JLabel jLabel1 = new javax.swing.JLabel();
        cbIgnoreRelevanceOnDiffFilter = new javax.swing.JComboBox();
        javax.swing.JLabel jLabel2 = new javax.swing.JLabel();
        cbDifferenceMethod = new javax.swing.JComboBox();

        setMinimumSize(new java.awt.Dimension(500, 400));
        java.awt.GridBagLayout layout = new java.awt.GridBagLayout();
        layout.columnWidths = new int[] {1};
        layout.rowHeights = new int[] {1};
        setLayout(layout);

        header.setDescription(org.openide.util.NbBundle.getMessage(SearchPathLinkCountPanel.class, "SearchPathLinkCountPanel.header.description")); // NOI18N
        header.setTitle(org.openide.util.NbBundle.getMessage(SearchPathLinkCountPanel.class, "SearchPathLinkCountPanel.header.title")); // NOI18N
        header.setMinimumSize(null);
        header.setPreferredSize(null);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        add(header, gridBagConstraints);

        panelGroupReportOptions.setBorder(javax.swing.BorderFactory.createTitledBorder(org.openide.util.NbBundle.getMessage(SearchPathLinkCountPanel.class, "SearchPathLinkCountPanel.panelGroupReportOptions.border.title"))); // NOI18N
        panelGroupReportOptions.setLayout(new java.awt.GridBagLayout());

        lbNumberOfPathsOnReport.setText(org.openide.util.NbBundle.getMessage(SearchPathLinkCountPanel.class, "SearchPathLinkCountPanel.lbNumberOfPathsOnReport.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        panelGroupReportOptions.add(lbNumberOfPathsOnReport, gridBagConstraints);

        spNumberOfPathsOnReport.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(1), Integer.valueOf(1), null, Integer.valueOf(1)));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 69;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        panelGroupReportOptions.add(spNumberOfPathsOnReport, gridBagConstraints);

        cbShowStartAndEnd.setModel(new javax.swing.DefaultComboBoxModel(YES_NO));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        panelGroupReportOptions.add(cbShowStartAndEnd, gridBagConstraints);

        lbShowStartAndEnd.setText(org.openide.util.NbBundle.getMessage(SearchPathLinkCountPanel.class, "SearchPathLinkCountPanel.lbShowStartAndEnd.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        panelGroupReportOptions.add(lbShowStartAndEnd, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 5, 5);
        add(panelGroupReportOptions, gridBagConstraints);

        panelGroupMetadataOptions.setBorder(javax.swing.BorderFactory.createTitledBorder(null, org.openide.util.NbBundle.getMessage(SearchPathLinkCountPanel.class, "SearchPathLinkCountPanel.panelGroupMetadataOptions.border.title"), javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, null, java.awt.Color.black)); // NOI18N
        java.awt.GridBagLayout panelMetadataLayout = new java.awt.GridBagLayout();
        panelMetadataLayout.columnWidths = new int[] {1};
        panelMetadataLayout.rowHeights = new int[] {1};
        panelGroupMetadataOptions.setLayout(panelMetadataLayout);

        LbNumberOfPathOnMetadata.setText(org.openide.util.NbBundle.getMessage(SearchPathLinkCountPanel.class, "SearchPathLinkCountPanel.LbNumberOfPathOnMetadata.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = -51;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        panelGroupMetadataOptions.add(LbNumberOfPathOnMetadata, gridBagConstraints);

        spNumberOfPathOnMetadata.setModel(new javax.swing.SpinnerNumberModel(1, 0, 30, 1));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 69;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        panelGroupMetadataOptions.add(spNumberOfPathOnMetadata, gridBagConstraints);

        lbPathMerge.setText(org.openide.util.NbBundle.getMessage(SearchPathLinkCountPanel.class, "SearchPathLinkCountPanel.lbPathMerge.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = -51;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        panelGroupMetadataOptions.add(lbPathMerge, gridBagConstraints);

        spinnerMerge.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(1), Integer.valueOf(0), null, Integer.valueOf(1)));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 69;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        panelGroupMetadataOptions.add(spinnerMerge, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 5, 5);
        add(panelGroupMetadataOptions, gridBagConstraints);

        panelMetodologyOptions.setBorder(javax.swing.BorderFactory.createTitledBorder(org.openide.util.NbBundle.getMessage(SearchPathLinkCountPanel.class, "SearchPathLinkCountPanel.panelMetodologyOptions.border.title"))); // NOI18N
        panelMetodologyOptions.setLayout(new java.awt.GridBagLayout());

        lbWeightField.setText(org.openide.util.NbBundle.getMessage(SearchPathLinkCountPanel.class, "SearchPathLinkCountPanel.lbWeightField.text")); // NOI18N
        lbWeightField.setName(org.openide.util.NbBundle.getMessage(SearchPathLinkCountPanel.class, "SearchPathLinkCountPanel.lbWeightField.name")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        panelMetodologyOptions.add(lbWeightField, gridBagConstraints);

        lbMinimumDifference.setLabelFor(spMinimumDifference);
        lbMinimumDifference.setText(org.openide.util.NbBundle.getMessage(SearchPathLinkCountPanel.class, "SearchPathLinkCountPanel.lbMinimumDifference.text")); // NOI18N
        lbMinimumDifference.setName(org.openide.util.NbBundle.getMessage(SearchPathLinkCountPanel.class, "SearchPathLinkCountPanel.lbMinimumDifference.name")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        panelMetodologyOptions.add(lbMinimumDifference, gridBagConstraints);

        cbWeight.setModel(new com.eleandro.gephi.plugin.searchpath.MetadadosComboModel(com.eleandro.gephi.plugin.searchpath.MetadadosComboModel.Type.EDGE));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 70;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        panelMetodologyOptions.add(cbWeight, gridBagConstraints);

        spMinimumDifference.setModel(new javax.swing.SpinnerNumberModel(Float.valueOf(0.0f), Float.valueOf(0.0f), Float.valueOf(100.0f), Float.valueOf(0.1f)));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 69;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        panelMetodologyOptions.add(spMinimumDifference, gridBagConstraints);

        jLabel1.setText(org.openide.util.NbBundle.getMessage(SearchPathLinkCountPanel.class, "SearchPathLinkCountPanel.jLabel1.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        panelMetodologyOptions.add(jLabel1, gridBagConstraints);

        cbIgnoreRelevanceOnDiffFilter.setModel(new javax.swing.DefaultComboBoxModel(YES_NO));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        panelMetodologyOptions.add(cbIgnoreRelevanceOnDiffFilter, gridBagConstraints);

        jLabel2.setText(org.openide.util.NbBundle.getMessage(SearchPathLinkCountPanel.class, "SearchPathLinkCountPanel.jLabel2.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        panelMetodologyOptions.add(jLabel2, gridBagConstraints);

        cbDifferenceMethod.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Um a um", "Todos com todos" }));
        cbDifferenceMethod.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                differenceMethodChange(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        panelMetodologyOptions.add(cbDifferenceMethod, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 138;
        gridBagConstraints.ipady = 10;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 5, 5);
        add(panelMetodologyOptions, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    private void differenceMethodChange(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_differenceMethodChange
        if(cbDifferenceMethod.getSelectedIndex() ==0){
            cbIgnoreRelevanceOnDiffFilter.setEnabled(true);
        }else{
            cbIgnoreRelevanceOnDiffFilter.setEnabled(false);
        }
    }//GEN-LAST:event_differenceMethodChange


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox cbDifferenceMethod;
    private javax.swing.JComboBox cbIgnoreRelevanceOnDiffFilter;
    private javax.swing.JComboBox cbShowStartAndEnd;
    private javax.swing.JComboBox cbWeight;
    private javax.swing.JSpinner spMinimumDifference;
    private javax.swing.JSpinner spNumberOfPathOnMetadata;
    private javax.swing.JSpinner spNumberOfPathsOnReport;
    private javax.swing.JSpinner spinnerMerge;
    // End of variables declaration//GEN-END:variables

}
