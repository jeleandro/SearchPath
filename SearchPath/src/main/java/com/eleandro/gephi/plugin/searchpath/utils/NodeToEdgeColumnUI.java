/*
 * Your license here
 *
 * If you don't need it, remove this file and edit MyMetricUI accordingly.
 */
package com.eleandro.gephi.plugin.searchpath.utils;

import java.awt.event.ActionListener;

/**
 *
 * @author José Eleandro Custódio
 */
public class NodeToEdgeColumnUI extends javax.swing.JPanel {
    /**
     * Creates new form NodeToEdgeColumnUI
     */
    public NodeToEdgeColumnUI() {
        initComponents();
    }

    /**
     * -----------------------------------------------------------
     */
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        org.jdesktop.swingx.JXHeader header = new org.jdesktop.swingx.JXHeader();
        javax.swing.JPanel panelMetodologyOptions = new javax.swing.JPanel();
        javax.swing.JLabel lbFieldA = new javax.swing.JLabel();
        javax.swing.JLabel lbOperation = new javax.swing.JLabel();
        cbFieldOnSource = new javax.swing.JComboBox();
        javax.swing.JLabel jLabel1 = new javax.swing.JLabel();
        cbFieldOnTarget = new javax.swing.JComboBox();
        cbOperation = new javax.swing.JComboBox();
        javax.swing.JLabel jLabel2 = new javax.swing.JLabel();
        txtFieldName = new javax.swing.JTextField();
        jPanel1 = new javax.swing.JPanel();
        btOK = new javax.swing.JButton();
        btCancel = new javax.swing.JButton();

        setMinimumSize(new java.awt.Dimension(500, 400));
        java.awt.GridBagLayout layout = new java.awt.GridBagLayout();
        layout.columnWidths = new int[] {1};
        layout.rowHeights = new int[] {1};
        setLayout(layout);

        header.setDescription(org.openide.util.NbBundle.getMessage(NodeToEdgeColumnUI.class, "NodeToEdgeColumnUI.header.description")); // NOI18N
        header.setTitle(org.openide.util.NbBundle.getMessage(NodeToEdgeColumnUI.class, "NodeToEdgeColumnUI.header.title")); // NOI18N
        header.setMinimumSize(null);
        header.setPreferredSize(null);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        add(header, gridBagConstraints);

        panelMetodologyOptions.setBorder(javax.swing.BorderFactory.createTitledBorder(org.openide.util.NbBundle.getMessage(NodeToEdgeColumnUI.class, "NodeToEdgeColumnUI.panelMetodologyOptions.border.title"))); // NOI18N
        panelMetodologyOptions.setLayout(new java.awt.GridBagLayout());

        lbFieldA.setText(org.openide.util.NbBundle.getMessage(NodeToEdgeColumnUI.class, "NodeToEdgeColumnUI.lbFieldA.text")); // NOI18N
        lbFieldA.setName(org.openide.util.NbBundle.getMessage(NodeToEdgeColumnUI.class, "NodeToEdgeColumnUI.lbFieldA.name")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        panelMetodologyOptions.add(lbFieldA, gridBagConstraints);

        lbOperation.setText(org.openide.util.NbBundle.getMessage(NodeToEdgeColumnUI.class, "NodeToEdgeColumnUI.lbOperation.text")); // NOI18N
        lbOperation.setName(org.openide.util.NbBundle.getMessage(NodeToEdgeColumnUI.class, "NodeToEdgeColumnUI.lbOperation.name")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        panelMetodologyOptions.add(lbOperation, gridBagConstraints);

        cbFieldOnSource.setModel(new com.eleandro.gephi.plugin.searchpath.MetadadosComboModel(com.eleandro.gephi.plugin.searchpath.MetadadosComboModel.Type.NODE,new String[]{"0","1"}));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 70;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        panelMetodologyOptions.add(cbFieldOnSource, gridBagConstraints);

        jLabel1.setText(org.openide.util.NbBundle.getMessage(NodeToEdgeColumnUI.class, "NodeToEdgeColumnUI.jLabel1.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        panelMetodologyOptions.add(jLabel1, gridBagConstraints);

        cbFieldOnTarget.setModel(new com.eleandro.gephi.plugin.searchpath.MetadadosComboModel(com.eleandro.gephi.plugin.searchpath.MetadadosComboModel.Type.NODE,new String[]{"0","1"}));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        panelMetodologyOptions.add(cbFieldOnTarget, gridBagConstraints);

        cbOperation.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "+", "-", "*", "/", "^" }));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 70;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        panelMetodologyOptions.add(cbOperation, gridBagConstraints);

        jLabel2.setText(org.openide.util.NbBundle.getMessage(NodeToEdgeColumnUI.class, "NodeToEdgeColumnUI.jLabel2.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        panelMetodologyOptions.add(jLabel2, gridBagConstraints);

        txtFieldName.setText(org.openide.util.NbBundle.getMessage(NodeToEdgeColumnUI.class, "NodeToEdgeColumnUI.txtFieldName.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        panelMetodologyOptions.add(txtFieldName, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 138;
        gridBagConstraints.ipady = 10;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 5, 5);
        add(panelMetodologyOptions, gridBagConstraints);

        btOK.setText(org.openide.util.NbBundle.getMessage(NodeToEdgeColumnUI.class, "NodeToEdgeColumnUI.btOK.text")); // NOI18N
        jPanel1.add(btOK);

        btCancel.setText(org.openide.util.NbBundle.getMessage(NodeToEdgeColumnUI.class, "NodeToEdgeColumnUI.btCancel.text")); // NOI18N
        jPanel1.add(btCancel);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        add(jPanel1, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btCancel;
    private javax.swing.JButton btOK;
    private javax.swing.JComboBox cbFieldOnSource;
    private javax.swing.JComboBox cbFieldOnTarget;
    private javax.swing.JComboBox cbOperation;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JTextField txtFieldName;
    // End of variables declaration//GEN-END:variables

    public void addActionListenerToBtOK(ActionListener action) {
        btOK.addActionListener(action);
    }

    public void addActionListenerToBtCancel(ActionListener action) {
        btCancel.addActionListener(action);
    }

    public void removeActionListenerToBtOK(ActionListener action) {
        btOK.removeActionListener(action);
    }

    public void removeActionListenerToBtCancel(ActionListener action) {
        btCancel.removeActionListener(action);
    }

    public void removeAllActionListeners() {
        for (ActionListener l : btOK.getActionListeners()) {
            btOK.removeActionListener(l);
        }
        for (ActionListener l : btCancel.getActionListeners()) {
            btCancel.removeActionListener(l);
        }
    }
    
    public  NodeToEdgeColumnConfig getConfig(){
        return new NodeToEdgeColumnConfig()
                .setFieldOnSource(cbFieldOnSource.getSelectedItem().toString())
                .setOperation(cbOperation.getSelectedItem().toString())
                .setFieldOnTarget(cbFieldOnTarget.getSelectedItem().toString())
                .setNewFieldName(txtFieldName.getText())
        ;
    }
    
    public boolean validateConfig(){
        return
              txtFieldName.getText().trim().length() > 0
              && cbFieldOnTarget.getSelectedIndex() >= 0
              && cbOperation.getSelectedIndex() >= 0
              && cbFieldOnSource.getSelectedIndex() >= 0
               ;
    }

    public static class NodeToEdgeColumnConfig {

        private String fieldOnSource;
        private String operation;
        private String fieldOnTarget;
        private String newFieldName;

        public String getFieldOnSource() {
            return fieldOnSource;
        }

        public NodeToEdgeColumnConfig setFieldOnSource(String fieldOnSource) {
            this.fieldOnSource = fieldOnSource;
            return this;
        }

        public String getOperation() {
            return operation;
        }

        public NodeToEdgeColumnConfig setOperation(String operation) {
            this.operation = operation;
            return this;
        }

        public String getFieldOnTarget() {
            return fieldOnTarget;
        }

        public NodeToEdgeColumnConfig setFieldOnTarget(String fieldOnTarget) {
            this.fieldOnTarget = fieldOnTarget;
            return this;
        }

        public String getNewFieldName() {
            return newFieldName;
        }

        public NodeToEdgeColumnConfig setNewFieldName(String newFieldName) {
            this.newFieldName = newFieldName;
            return this;
        }
        
        
    }
}
